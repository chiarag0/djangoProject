
class SearchByTag(ListView):
    model = models.Recipe
    template_name = 'recipes/search_by_tag.html'
    context_object_name = 'recipe_list'

    def get_queryset(self):
        tag_name = self.request.GET.get('tag_name')
        print(f"Tag name: {tag_name}")
        if tag_name:
            queryset = models.Recipe.objects.filter(tags__name=tag_name)
            print(f"Filtered queryset: {queryset}")
            return queryset
        return models.Recipe.objects.none()

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        tag_name = self.request.GET.get('tag_name')
        if tag_name:
            context['tag_name'] = tag_name
        return context



path('search-by-tag/', views.SearchByTag.as_view(), name='search-by-tag'),

    path('recipe/<int:pk>/tags/create/', views.TagsCreateView.as_view(), name="tags-create"),
    path('recipe/<int:pk>/tags/update/', views.TagsListView.as_view(), name="tags-list"),


class TagsCreateView(CreateView):
    model = models.Tag
    fields = ['name']
    template_name = 'recipes/create_recipe_tags.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['recipe'] = models.Recipe.objects.get(pk=self.kwargs['pk'])
        return context

    def form_valid(self, form):
        return super().form_valid(form)


    #print errors if form not valid
    def form_invalid(self, form):
        # Print form errors
        print(form.errors)

        # Print non-field errors
        print(form.non_field_errors())

        # Return the default behavior
        return super().form_invalid(form)

    def get_success_url(self):
        return reverse_lazy('tags-list', kwargs={'pk': self.kwargs['pk']})


class TagsListView(ListView):
    model = models.Tag
    template_name = 'recipes/tags_list.html'
    context_object_name = 'tags'

    def get_queryset(self):
        recipe_pk = self.kwargs['pk']
        recipe = models.Recipe.objects.get(pk=recipe_pk)
        return models.Tag.objects.filter(recipe=recipe)

    def get_context_data(self, *, object_list=None, **kwargs):
        context = super().get_context_data(**kwargs)
        context['recipe'] = models.Recipe.objects.get(pk=self.kwargs['pk'])
        recipe_pk = self.kwargs['pk']
        recipe = models.Recipe.objects.get(pk=recipe_pk)
        context['tags'] = models.Tag.objects.filter(recipe=recipe)
        return context

    def get_success_url(self):
        recipe_pk = self.kwargs['pk']
        return reverse_lazy('recipes-detail', kwargs={'pk': recipe_pk})



